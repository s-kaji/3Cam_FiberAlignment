//
// File generated by HDevelop for HALCON/.NET (C#) Version 12.0.3
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport00
{
    public HTuple hv_ExpDefaultWinHandle;
    private bool loopstop = false;
    public HTuple hv_maker = null;                  //カメラメーカ
    public HTuple hv_resoH = new HTuple();          //画像サイズ：高さ
    public HTuple hv_resoW = new HTuple();          //画像サイズ：幅
    public HTuple hv_number = null;                 //カメラ番号
    public HTuple hv_gain = new HTuple();           //ゲイン
    public HTuple hv_exposure = new HTuple();       //露出時間
    public HTuple hv_digital_gain = new HTuple();   //デジタルゲイン
    public HTuple hv_mirror = null;                 //鏡面

    public void HDevelopStop()
    {
        loopstop = true;
    }

    // Procedures 
    // Main procedure 
    private void action()
    {
        // Local iconic variables 

        HObject ho_Image = null, ho_ImageMirror = null, ho_ImageMirrorRow = null;

        // Local control variables 

        HTuple hv_AcqHandle = null;
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        HOperatorSet.GenEmptyObj(out ho_ImageMirror);
        HOperatorSet.GenEmptyObj(out ho_ImageMirrorRow);
        try
        {
            //Image Acquisition 01: Code generated by Image Acquisition 01
            //HOperatorSet.OpenFramegrabber("Sentech", 1, 1, 0, 0, 0, 0, "progressive", 8,
            //    "default", -1, "false", "default", "1", 0, -1, out hv_AcqHandle);
            HOperatorSet.OpenFramegrabber(hv_maker, 1, 1, 0, 0, 0, 0, "progressive", 8,
                "default", -1, "false", "default", hv_number, 0, -1, out hv_AcqHandle);
            HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "bayer_pattern", "gbrg");
            //MessageBox.Show("are you ready?");
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            while (!loopstop)
            {
                Application.DoEvents();     //
                HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "digital_gain", hv_digital_gain);
                HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "gain", hv_gain);
                HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", hv_exposure);
                ho_Image.Dispose();
                HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
                if (hv_mirror != "")
                {
                    ho_ImageMirror.Dispose();
                    if (hv_mirror == "diagonal")
                    {
                        ho_ImageMirrorRow.Dispose();
                        HOperatorSet.MirrorImage(ho_Image, out ho_ImageMirrorRow, "row");
                        HOperatorSet.MirrorImage(ho_ImageMirrorRow, out ho_ImageMirror, "column");
                    }
                    else
                    {
                        HOperatorSet.MirrorImage(ho_Image, out ho_ImageMirror, hv_mirror);
                    }
                    HOperatorSet.DispObj(ho_ImageMirror, hv_ExpDefaultWinHandle);
                }
                else
                {
                    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    //ho_ImageMirror = ho_Image;
                }
                System.Threading.Thread.Sleep(100);       
            }
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
        }
        catch (HalconException HDevExpDefaultException)
        {
            MessageBox.Show(HDevExpDefaultException.Message);
            //throw HDevExpDefaultException;
        }
        ho_Image.Dispose();
        ho_ImageMirror.Dispose();
        ho_ImageMirrorRow.Dispose();
    }

    public void InitHalcon()
    {
        // Default settings used in HDevelop 
        HOperatorSet.SetSystem("width", hv_resoW);
        HOperatorSet.SetSystem("height", hv_resoH);
    }

    public void RunHalcon(HTuple Window)
    {
        //loopstop = _3Cam_FiberAlignment.FormMain.Instance.chkCAM1.Checked;
        loopstop = false;
        hv_ExpDefaultWinHandle = Window;
        action();
    }

}

